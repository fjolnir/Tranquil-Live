_objectStack = []

\ Returns the current state object, be it the scene state or of an object in it.
currState = {
    if _objectStack count > 0
        ^_objectStack lastObject state
    else
        ^scene currentState
}

\ Creates a copy of the current scene state and makes it the current state for the duration of the passed block
pushState = { lambda |
    scene pushState
    lambda()
    scene popState
}

\ Makes the state manipulation functions apply to the state of the passed primitive
withPrimitive = { primitive, lambda |
    _objectStack addObject: primitive
    lambda()
    _objectStack removeLastObject
}

scale = { vec |
    state = currState()
    state setTransform: state transform * (Mat4 scale: vec)
}
translate = { vec |
    state = currState()
    state:setTransform: state transform * (Mat4 translation: vec)
}
rotate = { angle, vec |
    state = currState()
    state setTransform: state transform * (Mat4 rotationWithAngle: angle axis: vec)
}
color = { color |
    currState() setColor: color
}
